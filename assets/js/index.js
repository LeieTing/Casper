"use strict";

/**
 * Main JS file for Casper behaviours
 */

/* globals jQuery, document */
(function ($, undefined) {
  "use strict";

  var $document = $(document);

  $document.ready(function () {

    var $postContent = $(".post-content");
    $postContent.fitVids();

    $(".scroll-down").arctic_scroll();

    $(".menu-button, .nav-cover, .nav-close").on("click", function (e) {
      e.preventDefault();
      $("body").toggleClass("nav-opened nav-closed");
    });

    $('#google-form').activateGoogleForm();

    $('#postnummer').activatePostalLookup();
  });

  // Arctic Scroll by Paul Adam Davis
  // https://github.com/PaulAdamDavis/Arctic-Scroll
  $.fn.arctic_scroll = function (options) {

    var defaults = {
      elem: $(this),
      speed: 500
    },
        allOptions = $.extend(defaults, options);

    allOptions.elem.click(function (event) {
      event.preventDefault();
      var $this = $(this),
          $htmlBody = $('html, body'),
          offset = $this.attr('data-offset') ? $this.attr('data-offset') : false,
          position = $this.attr('data-position') ? $this.attr('data-position') : false,
          toMove;

      if (offset) {
        toMove = parseInt(offset);
        $htmlBody.stop(true, false).animate({ scrollTop: $(this.hash).offset().top + toMove }, allOptions.speed);
      } else if (position) {
        toMove = parseInt(position);
        $htmlBody.stop(true, false).animate({ scrollTop: toMove }, allOptions.speed);
      } else {
        $htmlBody.stop(true, false).animate({ scrollTop: $(this.hash).offset().top }, allOptions.speed);
      }
    });
  };

  $.fn.activateGoogleForm = function () {
    var resultMessage = this.data('result-message');
    var $resultMessage = $('<div>', {
      class: 'has-text-centered',
      text: resultMessage
    }).hide();

    this.one('submit', function (e) {
      $(this).before($resultMessage).fadeOut(function () {
        $resultMessage.fadeIn();
      });
    });
  };

  $.fn.activatePostalLookup = function () {
    var $elem = $(this);
    var $poststed = $($elem.data('place-element'));
    var $loadingElement = $($elem.data('place-loading-element'));

    $elem.on('change input', function (e) {
      var postnummer = e.target.value;

      if (postnummer.length < 4) {
        return $poststed.val('');
      }

      $loadingElement.toggleClass('is-loading', true);

      $.getJSON('https://api.bring.com/shippingguide/api/postalCode.json', {
        clientUrl: window.location.href,
        pnr: postnummer
      }).done(function (response) {
        var value = '';
        if (response.valid) {
          value = response.result;
        }
        $poststed.val(value);
      }).always(function () {
        $loadingElement.toggleClass('is-loading', false);
      });
    });
  };
})(jQuery);
//# sourceMappingURL=data:application/json;base64,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WSxFQUFFLE1BQU0sSUFBTixDQUFXLGVBQVgsQ0FBRixDQUFoQjtBQUNBLFFBQUksa0JBQWtCLEVBQUUsTUFBTSxJQUFOLENBQVcsdUJBQVgsQ0FBRixDQUF0Qjs7QUFFQSxVQUFNLEVBQU4sQ0FBUyxjQUFULEVBQXlCLFVBQVUsQ0FBVixFQUFhO0FBQ3BDLFVBQUksYUFBYSxFQUFFLE1BQUYsQ0FBUyxLQUExQjs7QUFFQSxVQUFJLFdBQVcsTUFBWCxHQUFvQixDQUF4QixFQUEyQjtBQUN6QixlQUFPLFVBQVUsR0FBVixDQUFjLEVBQWQsQ0FBUDtBQUNEOztBQUVELHNCQUFnQixXQUFoQixDQUE0QixZQUE1QixFQUEwQyxJQUExQzs7QUFFQSxRQUFFLE9BQUYsQ0FBVSx5REFBVixFQUFxRTtBQUNuRSxtQkFBVyxPQUFPLFFBQVAsQ0FBZ0IsSUFEd0M7QUFFbkUsYUFBSztBQUY4RCxPQUFyRSxFQUlHLElBSkgsQ0FJUSxVQUFDLFFBQUQsRUFBYztBQUNsQixZQUFJLFFBQVEsRUFBWjtBQUNBLFlBQUksU0FBUyxLQUFiLEVBQW9CO0FBQ2hCLGtCQUFRLFNBQVMsTUFBakI7QUFDSDtBQUNELGtCQUFVLEdBQVYsQ0FBYyxLQUFkO0FBQ0QsT0FWSCxFQVdHLE1BWEgsQ0FXVSxZQUFNO0FBQ1osd0JBQWdCLFdBQWhCLENBQTRCLFlBQTVCLEVBQTBDLEtBQTFDO0FBQ0QsT0FiSDtBQWNELEtBdkJEO0FBd0JELEdBN0JEO0FBOEJELENBbEdELEVBa0dHLE1BbEdIIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBNYWluIEpTIGZpbGUgZm9yIENhc3BlciBiZWhhdmlvdXJzXG4gKi9cblxuLyogZ2xvYmFscyBqUXVlcnksIGRvY3VtZW50ICovXG4oZnVuY3Rpb24gKCQsIHVuZGVmaW5lZCkge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgJGRvY3VtZW50ID0gJChkb2N1bWVudCk7XG5cbiAgJGRvY3VtZW50LnJlYWR5KGZ1bmN0aW9uICgpIHtcblxuICAgIHZhciAkcG9zdENvbnRlbnQgPSAkKFwiLnBvc3QtY29udGVudFwiKTtcbiAgICAkcG9zdENvbnRlbnQuZml0VmlkcygpO1xuXG4gICAgJChcIi5zY3JvbGwtZG93blwiKS5hcmN0aWNfc2Nyb2xsKCk7XG5cbiAgICAkKFwiLm1lbnUtYnV0dG9uLCAubmF2LWNvdmVyLCAubmF2LWNsb3NlXCIpLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24oZSl7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAkKFwiYm9keVwiKS50b2dnbGVDbGFzcyhcIm5hdi1vcGVuZWQgbmF2LWNsb3NlZFwiKTtcbiAgICB9KTtcblxuICAgICQoJyNnb29nbGUtZm9ybScpLmFjdGl2YXRlR29vZ2xlRm9ybSgpO1xuXG4gICAgJCgnI3Bvc3RudW1tZXInKS5hY3RpdmF0ZVBvc3RhbExvb2t1cCgpO1xuICB9KTtcblxuICAvLyBBcmN0aWMgU2Nyb2xsIGJ5IFBhdWwgQWRhbSBEYXZpc1xuICAvLyBodHRwczovL2dpdGh1Yi5jb20vUGF1bEFkYW1EYXZpcy9BcmN0aWMtU2Nyb2xsXG4gICQuZm4uYXJjdGljX3Njcm9sbCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG5cbiAgICB2YXIgZGVmYXVsdHMgPSB7XG4gICAgICBlbGVtOiAkKHRoaXMpLFxuICAgICAgc3BlZWQ6IDUwMFxuICAgIH0sXG5cbiAgICAgIGFsbE9wdGlvbnMgPSAkLmV4dGVuZChkZWZhdWx0cywgb3B0aW9ucyk7XG5cbiAgICBhbGxPcHRpb25zLmVsZW0uY2xpY2soZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgdmFyICR0aGlzID0gJCh0aGlzKSxcbiAgICAgICAgICAkaHRtbEJvZHkgPSAkKCdodG1sLCBib2R5JyksXG4gICAgICAgICAgb2Zmc2V0ID0gKCR0aGlzLmF0dHIoJ2RhdGEtb2Zmc2V0JykpID8gJHRoaXMuYXR0cignZGF0YS1vZmZzZXQnKSA6IGZhbHNlLFxuICAgICAgICAgIHBvc2l0aW9uID0gKCR0aGlzLmF0dHIoJ2RhdGEtcG9zaXRpb24nKSkgPyAkdGhpcy5hdHRyKCdkYXRhLXBvc2l0aW9uJykgOiBmYWxzZSxcbiAgICAgICAgICB0b01vdmU7XG5cbiAgICAgIGlmIChvZmZzZXQpIHtcbiAgICAgICAgdG9Nb3ZlID0gcGFyc2VJbnQob2Zmc2V0KTtcbiAgICAgICAgJGh0bWxCb2R5LnN0b3AodHJ1ZSwgZmFsc2UpLmFuaW1hdGUoe3Njcm9sbFRvcDogKCQodGhpcy5oYXNoKS5vZmZzZXQoKS50b3AgKyB0b01vdmUpIH0sIGFsbE9wdGlvbnMuc3BlZWQpO1xuICAgICAgfSBlbHNlIGlmIChwb3NpdGlvbikge1xuICAgICAgICB0b01vdmUgPSBwYXJzZUludChwb3NpdGlvbik7XG4gICAgICAgICRodG1sQm9keS5zdG9wKHRydWUsIGZhbHNlKS5hbmltYXRlKHtzY3JvbGxUb3A6IHRvTW92ZSB9LCBhbGxPcHRpb25zLnNwZWVkKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICRodG1sQm9keS5zdG9wKHRydWUsIGZhbHNlKS5hbmltYXRlKHtzY3JvbGxUb3A6ICgkKHRoaXMuaGFzaCkub2Zmc2V0KCkudG9wKSB9LCBhbGxPcHRpb25zLnNwZWVkKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICB9O1xuXG4gICQuZm4uYWN0aXZhdGVHb29nbGVGb3JtID0gZnVuY3Rpb24oKSB7XG4gICAgbGV0IHJlc3VsdE1lc3NhZ2UgPSB0aGlzLmRhdGEoJ3Jlc3VsdC1tZXNzYWdlJyk7XG4gICAgbGV0ICRyZXN1bHRNZXNzYWdlID0gJCgnPGRpdj4nLCB7XG4gICAgICBjbGFzczogJ2hhcy10ZXh0LWNlbnRlcmVkJyxcbiAgICAgIHRleHQ6IHJlc3VsdE1lc3NhZ2VcbiAgICB9KS5oaWRlKCk7XG5cbiAgICB0aGlzLm9uZSgnc3VibWl0JywgZnVuY3Rpb24oZSkge1xuICAgICAgJCh0aGlzKVxuICAgICAgICAuYmVmb3JlKCRyZXN1bHRNZXNzYWdlKVxuICAgICAgICAuZmFkZU91dCgoKSA9PiB7ICRyZXN1bHRNZXNzYWdlLmZhZGVJbigpIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gICQuZm4uYWN0aXZhdGVQb3N0YWxMb29rdXAgPSBmdW5jdGlvbigpIHtcbiAgICBsZXQgJGVsZW0gPSAkKHRoaXMpO1xuICAgIGxldCAkcG9zdHN0ZWQgPSAkKCRlbGVtLmRhdGEoJ3BsYWNlLWVsZW1lbnQnKSk7XG4gICAgbGV0ICRsb2FkaW5nRWxlbWVudCA9ICQoJGVsZW0uZGF0YSgncGxhY2UtbG9hZGluZy1lbGVtZW50JykpO1xuXG4gICAgJGVsZW0ub24oJ2NoYW5nZSBpbnB1dCcsIGZ1bmN0aW9uIChlKSB7XG4gICAgICBsZXQgcG9zdG51bW1lciA9IGUudGFyZ2V0LnZhbHVlO1xuXG4gICAgICBpZiAocG9zdG51bW1lci5sZW5ndGggPCA0KSB7XG4gICAgICAgIHJldHVybiAkcG9zdHN0ZWQudmFsKCcnKTtcbiAgICAgIH1cblxuICAgICAgJGxvYWRpbmdFbGVtZW50LnRvZ2dsZUNsYXNzKCdpcy1sb2FkaW5nJywgdHJ1ZSk7XG5cbiAgICAgICQuZ2V0SlNPTignaHR0cHM6Ly9hcGkuYnJpbmcuY29tL3NoaXBwaW5nZ3VpZGUvYXBpL3Bvc3RhbENvZGUuanNvbicsIHtcbiAgICAgICAgY2xpZW50VXJsOiB3aW5kb3cubG9jYXRpb24uaHJlZixcbiAgICAgICAgcG5yOiBwb3N0bnVtbWVyXG4gICAgICB9KVxuICAgICAgICAuZG9uZSgocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICBsZXQgdmFsdWUgPSAnJztcbiAgICAgICAgICBpZiAocmVzcG9uc2UudmFsaWQpIHtcbiAgICAgICAgICAgICAgdmFsdWUgPSByZXNwb25zZS5yZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICAgICRwb3N0c3RlZC52YWwodmFsdWUpO1xuICAgICAgICB9KVxuICAgICAgICAuYWx3YXlzKCgpID0+IHtcbiAgICAgICAgICAkbG9hZGluZ0VsZW1lbnQudG9nZ2xlQ2xhc3MoJ2lzLWxvYWRpbmcnLCBmYWxzZSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xufSkoalF1ZXJ5KTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
