"use strict";

/**
 * Main JS file for Casper behaviours
 */

/* globals jQuery, document */
(function ($, undefined) {
  "use strict";

  var $document = $(document);

  $document.ready(function () {

    var $postContent = $(".post-content");
    $postContent.fitVids();

    $(".scroll-down").arctic_scroll();

    $(".menu-button, .nav-cover, .nav-close").on("click", function (e) {
      e.preventDefault();
      $("body").toggleClass("nav-opened nav-closed");
    });

    $('#google-form').activateGoogleForm();

    $('#postnummer').activatePostalLookup();
  });

  // Arctic Scroll by Paul Adam Davis
  // https://github.com/PaulAdamDavis/Arctic-Scroll
  $.fn.arctic_scroll = function (options) {

    var defaults = {
      elem: $(this),
      speed: 500
    },
        allOptions = $.extend(defaults, options);

    allOptions.elem.click(function (event) {
      event.preventDefault();
      var $this = $(this),
          $htmlBody = $('html, body'),
          offset = $this.attr('data-offset') ? $this.attr('data-offset') : false,
          position = $this.attr('data-position') ? $this.attr('data-position') : false,
          toMove;

      if (offset) {
        toMove = parseInt(offset);
        $htmlBody.stop(true, false).animate({ scrollTop: $(this.hash).offset().top + toMove }, allOptions.speed);
      } else if (position) {
        toMove = parseInt(position);
        $htmlBody.stop(true, false).animate({ scrollTop: toMove }, allOptions.speed);
      } else {
        $htmlBody.stop(true, false).animate({ scrollTop: $(this.hash).offset().top }, allOptions.speed);
      }
    });
  };

  $.fn.activateGoogleForm = function () {
    var url = this.attr('action');
    var resultMessage = this.data('result-message');

    this.one('submit', function (e) {
      var $form = $(this);
      var values = $form.serialize();
      var submitURL = url;
      submitURL += '?';
      submitURL += values;
      submitURL += '&submit=Submit';
      e.target.action = submitURL;

      var $resultMessage = $('<div>', {
        class: 'has-text-centered',
        text: resultMessage
      }).hide();

      $form.before($resultMessage).fadeOut(function () {
        $resultMessage.fadeIn();
      });
    });
  };

  $.fn.activatePostalLookup = function () {
    var $elem = $(this);
    var $poststed = $($elem.data('place-element'));
    var $loadingElement = $($elem.data('place-loading-element'));

    $elem.on('change input', function (e) {
      var postnummer = e.target.value;

      if (postnummer.length < 4) {
        return $poststed.val('');
      }

      $loadingElement.toggleClass('is-loading', true);

      $.getJSON('https://api.bring.com/shippingguide/api/postalCode.json', {
        clientUrl: window.location.href,
        pnr: postnummer
      }).done(function (response) {
        var value = '';
        if (response.valid) {
          value = response.result;
        }
        $poststed.val(value);
      }).always(function () {
        $loadingElement.toggleClass('is-loading', false);
      });
    });
  };
})(jQuery);
//# sourceMappingURL=data:application/json;base64,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aW4gSlMgZmlsZSBmb3IgQ2FzcGVyIGJlaGF2aW91cnNcbiAqL1xuXG4vKiBnbG9iYWxzIGpRdWVyeSwgZG9jdW1lbnQgKi9cbihmdW5jdGlvbiAoJCwgdW5kZWZpbmVkKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciAkZG9jdW1lbnQgPSAkKGRvY3VtZW50KTtcblxuICAkZG9jdW1lbnQucmVhZHkoZnVuY3Rpb24gKCkge1xuXG4gICAgdmFyICRwb3N0Q29udGVudCA9ICQoXCIucG9zdC1jb250ZW50XCIpO1xuICAgICRwb3N0Q29udGVudC5maXRWaWRzKCk7XG5cbiAgICAkKFwiLnNjcm9sbC1kb3duXCIpLmFyY3RpY19zY3JvbGwoKTtcblxuICAgICQoXCIubWVudS1idXR0b24sIC5uYXYtY292ZXIsIC5uYXYtY2xvc2VcIikub24oXCJjbGlja1wiLCBmdW5jdGlvbihlKXtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICQoXCJib2R5XCIpLnRvZ2dsZUNsYXNzKFwibmF2LW9wZW5lZCBuYXYtY2xvc2VkXCIpO1xuICAgIH0pO1xuXG4gICAgJCgnI2dvb2dsZS1mb3JtJykuYWN0aXZhdGVHb29nbGVGb3JtKCk7XG5cbiAgICAkKCcjcG9zdG51bW1lcicpLmFjdGl2YXRlUG9zdGFsTG9va3VwKCk7XG4gIH0pO1xuXG4gIC8vIEFyY3RpYyBTY3JvbGwgYnkgUGF1bCBBZGFtIERhdmlzXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9QYXVsQWRhbURhdmlzL0FyY3RpYy1TY3JvbGxcbiAgJC5mbi5hcmN0aWNfc2Nyb2xsID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcblxuICAgIHZhciBkZWZhdWx0cyA9IHtcbiAgICAgIGVsZW06ICQodGhpcyksXG4gICAgICBzcGVlZDogNTAwXG4gICAgfSxcblxuICAgICAgYWxsT3B0aW9ucyA9ICQuZXh0ZW5kKGRlZmF1bHRzLCBvcHRpb25zKTtcblxuICAgIGFsbE9wdGlvbnMuZWxlbS5jbGljayhmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB2YXIgJHRoaXMgPSAkKHRoaXMpLFxuICAgICAgICAgICRodG1sQm9keSA9ICQoJ2h0bWwsIGJvZHknKSxcbiAgICAgICAgICBvZmZzZXQgPSAoJHRoaXMuYXR0cignZGF0YS1vZmZzZXQnKSkgPyAkdGhpcy5hdHRyKCdkYXRhLW9mZnNldCcpIDogZmFsc2UsXG4gICAgICAgICAgcG9zaXRpb24gPSAoJHRoaXMuYXR0cignZGF0YS1wb3NpdGlvbicpKSA/ICR0aGlzLmF0dHIoJ2RhdGEtcG9zaXRpb24nKSA6IGZhbHNlLFxuICAgICAgICAgIHRvTW92ZTtcblxuICAgICAgaWYgKG9mZnNldCkge1xuICAgICAgICB0b01vdmUgPSBwYXJzZUludChvZmZzZXQpO1xuICAgICAgICAkaHRtbEJvZHkuc3RvcCh0cnVlLCBmYWxzZSkuYW5pbWF0ZSh7c2Nyb2xsVG9wOiAoJCh0aGlzLmhhc2gpLm9mZnNldCgpLnRvcCArIHRvTW92ZSkgfSwgYWxsT3B0aW9ucy5zcGVlZCk7XG4gICAgICB9IGVsc2UgaWYgKHBvc2l0aW9uKSB7XG4gICAgICAgIHRvTW92ZSA9IHBhcnNlSW50KHBvc2l0aW9uKTtcbiAgICAgICAgJGh0bWxCb2R5LnN0b3AodHJ1ZSwgZmFsc2UpLmFuaW1hdGUoe3Njcm9sbFRvcDogdG9Nb3ZlIH0sIGFsbE9wdGlvbnMuc3BlZWQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJGh0bWxCb2R5LnN0b3AodHJ1ZSwgZmFsc2UpLmFuaW1hdGUoe3Njcm9sbFRvcDogKCQodGhpcy5oYXNoKS5vZmZzZXQoKS50b3ApIH0sIGFsbE9wdGlvbnMuc3BlZWQpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gIH07XG5cbiAgJC5mbi5hY3RpdmF0ZUdvb2dsZUZvcm0gPSBmdW5jdGlvbigpIHtcbiAgICBsZXQgdXJsID0gdGhpcy5hdHRyKCdhY3Rpb24nKTtcbiAgICBsZXQgcmVzdWx0TWVzc2FnZSA9IHRoaXMuZGF0YSgncmVzdWx0LW1lc3NhZ2UnKTtcblxuICAgIHRoaXMub25lKCdzdWJtaXQnLCBmdW5jdGlvbihlKSB7XG4gICAgICBsZXQgJGZvcm0gPSAkKHRoaXMpO1xuICAgICAgbGV0IHZhbHVlcyA9ICRmb3JtLnNlcmlhbGl6ZSgpO1xuICAgICAgbGV0IHN1Ym1pdFVSTCA9IHVybDtcbiAgICAgIHN1Ym1pdFVSTCArPSAnPyc7XG4gICAgICBzdWJtaXRVUkwgKz0gdmFsdWVzO1xuICAgICAgc3VibWl0VVJMICs9ICcmc3VibWl0PVN1Ym1pdCc7XG4gICAgICBlLnRhcmdldC5hY3Rpb24gPSBzdWJtaXRVUkw7XG5cbiAgICAgIGxldCAkcmVzdWx0TWVzc2FnZSA9ICQoJzxkaXY+Jywge1xuICAgICAgICBjbGFzczogJ2hhcy10ZXh0LWNlbnRlcmVkJyxcbiAgICAgICAgdGV4dDogcmVzdWx0TWVzc2FnZVxuICAgICAgfSkuaGlkZSgpO1xuXG4gICAgICAkZm9ybVxuICAgICAgICAuYmVmb3JlKCRyZXN1bHRNZXNzYWdlKVxuICAgICAgICAuZmFkZU91dCgoKSA9PiB7ICRyZXN1bHRNZXNzYWdlLmZhZGVJbigpIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gICQuZm4uYWN0aXZhdGVQb3N0YWxMb29rdXAgPSBmdW5jdGlvbigpIHtcbiAgICBsZXQgJGVsZW0gPSAkKHRoaXMpO1xuICAgIGxldCAkcG9zdHN0ZWQgPSAkKCRlbGVtLmRhdGEoJ3BsYWNlLWVsZW1lbnQnKSk7XG4gICAgbGV0ICRsb2FkaW5nRWxlbWVudCA9ICQoJGVsZW0uZGF0YSgncGxhY2UtbG9hZGluZy1lbGVtZW50JykpO1xuXG4gICAgJGVsZW0ub24oJ2NoYW5nZSBpbnB1dCcsIGZ1bmN0aW9uIChlKSB7XG4gICAgICBsZXQgcG9zdG51bW1lciA9IGUudGFyZ2V0LnZhbHVlO1xuXG4gICAgICBpZiAocG9zdG51bW1lci5sZW5ndGggPCA0KSB7XG4gICAgICAgIHJldHVybiAkcG9zdHN0ZWQudmFsKCcnKTtcbiAgICAgIH1cblxuICAgICAgJGxvYWRpbmdFbGVtZW50LnRvZ2dsZUNsYXNzKCdpcy1sb2FkaW5nJywgdHJ1ZSk7XG5cbiAgICAgICQuZ2V0SlNPTignaHR0cHM6Ly9hcGkuYnJpbmcuY29tL3NoaXBwaW5nZ3VpZGUvYXBpL3Bvc3RhbENvZGUuanNvbicsIHtcbiAgICAgICAgY2xpZW50VXJsOiB3aW5kb3cubG9jYXRpb24uaHJlZixcbiAgICAgICAgcG5yOiBwb3N0bnVtbWVyXG4gICAgICB9KVxuICAgICAgICAuZG9uZSgocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICBsZXQgdmFsdWUgPSAnJztcbiAgICAgICAgICBpZiAocmVzcG9uc2UudmFsaWQpIHtcbiAgICAgICAgICAgICAgdmFsdWUgPSByZXNwb25zZS5yZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICAgICRwb3N0c3RlZC52YWwodmFsdWUpO1xuICAgICAgICB9KVxuICAgICAgICAuYWx3YXlzKCgpID0+IHtcbiAgICAgICAgICAkbG9hZGluZ0VsZW1lbnQudG9nZ2xlQ2xhc3MoJ2lzLWxvYWRpbmcnLCBmYWxzZSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xufSkoalF1ZXJ5KTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
